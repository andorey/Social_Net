{"version":3,"sources":["Header/Header.module.css","NavBar/NavBar.module.css","Profile/Profile.module.css","Header/Header.jsx","NavBar/NavBar.jsx","Profile/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","s","header","src","alt","NavBar","nav","href","Profile","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,IAAM,sB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,0B,+KCUTC,EARH,WACd,OACC,yBAAKC,UAAWC,IAAEC,QACjB,yBAAKC,IAAI,uEAAuEC,IAAI,O,gBCmBxEC,EAtBA,WACd,OACC,yBAAKL,UAAWC,IAAEK,KACjB,6BACC,uBAAGC,KAAK,IAAR,YAED,6BACC,uBAAGA,KAAK,IAAR,aAED,6BACC,uBAAGA,KAAK,IAAR,SAED,6BACC,uBAAGA,KAAK,IAAR,UAED,6BACC,uBAAGA,KAAK,IAAR,e,gBCSWC,EAzBC,WACf,OACC,yBAAKR,UAAWC,IAAEC,QACjB,6BACC,yBAAKC,IAAI,oFAAoFC,IAAI,aAElG,kDAGA,wCAEC,yCAGA,uCAGA,0CCJWK,EAVH,WACX,OACC,yBAAKT,UAAU,eACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.640f20e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1m9KH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__-XRAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Profile_header__3Zwc_\"};","import React from 'react';\nimport s from './Header.module.css';\n\nconst Header = () => {\n\treturn (\n\t\t<div className={s.header}>\n\t\t\t<img src=\"https://seeklogo.com/images/M/MASON-logo-6EC4494474-seeklogo.com.png\" alt=\"\"/>\n\t\t</div>\n\t)\n}\n\n\t\t\texport default Header;\n","import React from 'react';\nimport s from './NavBar.module.css';\n\nconst NavBar = () => {\n\treturn (\n\t\t<div className={s.nav}>\n\t\t\t<div>\n\t\t\t\t<a href=\"\">Profile</a>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\">Messages</a>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\">News</a>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\">Music</a>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\">Settings</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default NavBar;\n","import React from 'react';\nimport s from './Profile.module.css';\n\nconst Profile = () => {\n\treturn (\n\t\t<div className={s.header}>\n\t\t\t<div>\n\t\t\t\t<img src=\"https://images.wallpaperscraft.com/image/mountain_lake_nature_81057_2560x1080.jpg\" alt=\"picture\"/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tava + description\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tMy posts\n\t\t\t\t<div>\n\t\t\t\t\tnew post\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\tpost 1\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\tpost 2\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Profile;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport NavBar from \"./NavBar/NavBar\";\nimport Profile from \"./Profile/Profile\";\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"app-wrapper\">\n\t\t\t<Header/>\n\t\t\t<NavBar/>\n\t\t\t<Profile/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}